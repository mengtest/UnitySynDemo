//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CharacterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Character), typeof(ObjBase));
		L.RegFunction("initCtrl", initCtrl);
		L.RegFunction("initView", initView);
		L.RegFunction("onRecycle", onRecycle);
		L.RegFunction("Release", Release);
		L.RegFunction("New", _CreateCharacter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCharacter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Character obj = new Character();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Character.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int initCtrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			obj.initCtrl();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int initView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
				obj.initView();
				return 0;
			}
			else if (count == 2)
			{
				Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.initView(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Character.initView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			obj.onRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			obj.Release();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

