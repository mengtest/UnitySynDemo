//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CharacterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Character), typeof(ObjBase));
		L.RegFunction("GetCtrl", GetCtrl);
		L.RegFunction("onRecycle", onRecycle);
		L.RegFunction("Release", Release);
		L.RegFunction("New", _CreateCharacter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ctrlType", get_ctrlType, set_ctrlType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCharacter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Character obj = new Character();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Character.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCtrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			Controller o = obj.GetCtrl();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			obj.onRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Character obj = (Character)ToLua.CheckObject<Character>(L, 1);
			obj.Release();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			GameEnum.CtrlType ret = obj.ctrlType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ctrlType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Character obj = (Character)o;
			GameEnum.CtrlType arg0 = (GameEnum.CtrlType)ToLua.CheckObject(L, 2, typeof(GameEnum.CtrlType));
			obj.ctrlType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ctrlType on a nil value");
		}
	}
}

