//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_ActionLabelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameEnum.ActionLabel), typeof(System.Object));
		L.RegFunction("New", _CreateGameEnum_ActionLabel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Null", get_Null, set_Null);
		L.RegVar("Stand", get_Stand, set_Stand);
		L.RegVar("StandUp", get_StandUp, set_StandUp);
		L.RegVar("Reborn", get_Reborn, set_Reborn);
		L.RegVar("Run", get_Run, set_Run);
		L.RegVar("BackOff", get_BackOff, set_BackOff);
		L.RegVar("CmdAction", get_CmdAction, set_CmdAction);
		L.RegVar("Dead", get_Dead, set_Dead);
		L.RegVar("Action", get_Action, set_Action);
		L.RegVar("run_fwd", get_run_fwd, set_run_fwd);
		L.RegVar("sprint_fwd", get_sprint_fwd, set_sprint_fwd);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameEnum_ActionLabel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameEnum.ActionLabel obj = new GameEnum.ActionLabel();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameEnum.ActionLabel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stand(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Stand);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StandUp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.StandUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reborn(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Reborn);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Run(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Run);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BackOff(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.BackOff);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CmdAction(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.CmdAction);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dead(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Dead);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Action(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Action);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_run_fwd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.run_fwd);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sprint_fwd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.sprint_fwd);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Null(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Null = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Stand(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Stand = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StandUp(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.StandUp = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Reborn(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Reborn = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Run(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Run = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BackOff(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.BackOff = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CmdAction(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.CmdAction = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Dead(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Dead = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Action(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.Action = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_run_fwd(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.run_fwd = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sprint_fwd(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameEnum.ActionLabel.sprint_fwd = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

