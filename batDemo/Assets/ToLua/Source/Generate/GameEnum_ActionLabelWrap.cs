//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_ActionLabelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameEnum.ActionLabel), typeof(System.Object));
		L.RegFunction("New", _CreateGameEnum_ActionLabel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Null", get_Null, null);
		L.RegVar("Stand", get_Stand, null);
		L.RegVar("StandUp", get_StandUp, null);
		L.RegVar("Reborn", get_Reborn, null);
		L.RegVar("Run", get_Run, null);
		L.RegVar("Walk", get_Walk, null);
		L.RegVar("Dash", get_Dash, null);
		L.RegVar("Jump", get_Jump, null);
		L.RegVar("BackOff", get_BackOff, null);
		L.RegVar("CmdAction", get_CmdAction, null);
		L.RegVar("Dead", get_Dead, null);
		L.RegVar("PickUp", get_PickUp, null);
		L.RegVar("Aiming", get_Aiming, null);
		L.RegVar("Shooting", get_Shooting, null);
		L.RegVar("UpIdle", get_UpIdle, null);
		L.RegVar("ChangeWeapon", get_ChangeWeapon, null);
		L.RegVar("ItemDrop", get_ItemDrop, null);
		L.RegVar("ItemDefault", get_ItemDefault, null);
		L.RegVar("Action", get_Action, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameEnum_ActionLabel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameEnum.ActionLabel obj = new GameEnum.ActionLabel();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameEnum.ActionLabel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stand(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Stand);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StandUp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.StandUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reborn(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Reborn);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Run(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Run);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Walk(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Walk);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dash(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Dash);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Jump(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Jump);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BackOff(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.BackOff);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CmdAction(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.CmdAction);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dead(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Dead);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PickUp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.PickUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Aiming(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Aiming);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shooting(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Shooting);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpIdle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.UpIdle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangeWeapon(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.ChangeWeapon);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ItemDrop(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.ItemDrop);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ItemDefault(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.ItemDefault);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Action(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.ActionLabel.Action);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

