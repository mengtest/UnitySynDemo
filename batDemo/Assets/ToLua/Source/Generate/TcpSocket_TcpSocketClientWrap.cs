//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TcpSocket_TcpSocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TcpSocket.TcpSocketClient), typeof(System.Object));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("RegisteHandle", RegisteHandle);
		L.RegFunction("ConnectServer", ConnectServer);
		L.RegFunction("OnConnect", OnConnect);
		L.RegFunction("DoReceive", DoReceive);
		L.RegFunction("_doReceive", _doReceive);
		L.RegFunction("WriteMessage", WriteMessage);
		L.RegFunction("OnWrite", OnWrite);
		L.RegFunction("OnDisconnected", OnDisconnected);
		L.RegFunction("Close", Close);
		L.RegFunction("SendBytes", SendBytes);
		L.RegFunction("Send", Send);
		L.RegFunction("SendPbMsg", SendPbMsg);
		L.RegFunction("SendConnect", SendConnect);
		L.RegFunction("IsConnected", IsConnected);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			TcpSocket.TcpSocketClient o = TcpSocket.TcpSocketClient.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisteHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			System.Func<TcpSocket.Proto.CmdPacket,bool> arg1 = (System.Func<TcpSocket.Proto.CmdPacket,bool>)ToLua.CheckDelegate<System.Func<TcpSocket.Proto.CmdPacket,bool>>(L, 3);
			Google.Protobuf.MessageParser arg2 = (Google.Protobuf.MessageParser)ToLua.CheckObject<Google.Protobuf.MessageParser>(L, 4);
			obj.RegisteHandle(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.ConnectServer(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.OnConnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoReceive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.DoReceive(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _doReceive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			obj._doReceive();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.OnWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDisconnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.OnDisconnected(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SendBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendPbMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Google.Protobuf.IMessage arg1 = (Google.Protobuf.IMessage)ToLua.CheckObject<Google.Protobuf.IMessage>(L, 3);
			obj.SendPbMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SendConnect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TcpSocket.TcpSocketClient obj = (TcpSocket.TcpSocketClient)ToLua.CheckObject<TcpSocket.TcpSocketClient>(L, 1);
			bool o = obj.IsConnected();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

