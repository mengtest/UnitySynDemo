//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_AniLabelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameEnum.AniLabel), typeof(System.Object));
		L.RegFunction("New", _CreateGameEnum_AniLabel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Idle", get_Idle, null);
		L.RegVar("aim_Idle", get_aim_Idle, null);
		L.RegVar("Idle_Wait_A", get_Idle_Wait_A, null);
		L.RegVar("Idle_Wait_B", get_Idle_Wait_B, null);
		L.RegVar("run_fwd", get_run_fwd, null);
		L.RegVar("walk_fwd", get_walk_fwd, null);
		L.RegVar("Mvm_Jog", get_Mvm_Jog, null);
		L.RegVar("Mvm_Dash", get_Mvm_Dash, null);
		L.RegVar("Mvm_DashEnd_C", get_Mvm_DashEnd_C, null);
		L.RegVar("Mvm_DashEnd_B", get_Mvm_DashEnd_B, null);
		L.RegVar("Mvm_Stop_Front", get_Mvm_Stop_Front, null);
		L.RegVar("Jmp_Base_A_Rise", get_Jmp_Base_A_Rise, null);
		L.RegVar("Jmp_Base_A_OnGround", get_Jmp_Base_A_OnGround, null);
		L.RegVar("Jmp_Base_A_Fall", get_Jmp_Base_A_Fall, null);
		L.RegVar("PickUp", get_PickUp, null);
		L.RegVar("Down_Jmp_Base_A_Rise", get_Down_Jmp_Base_A_Rise, null);
		L.RegVar("Down_Jmp_Base_A_OnGround", get_Down_Jmp_Base_A_OnGround, null);
		L.RegVar("Down_Jmp_Base_A_Fall", get_Down_Jmp_Base_A_Fall, null);
		L.RegVar("DownIdle", get_DownIdle, null);
		L.RegVar("UpIdle", get_UpIdle, null);
		L.RegVar("ChangeWeapon", get_ChangeWeapon, null);
		L.RegVar("pistol_aim", get_pistol_aim, null);
		L.RegVar("pistol_reload", get_pistol_reload, null);
		L.RegVar("pistol_shot", get_pistol_shot, null);
		L.RegVar("pistol_guard", get_pistol_guard, null);
		L.RegVar("rifle_aim", get_rifle_aim, null);
		L.RegVar("rifle_reload", get_rifle_reload, null);
		L.RegVar("rifle_shot", get_rifle_shot, null);
		L.RegVar("rifle_idle", get_rifle_idle, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameEnum_AniLabel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameEnum.AniLabel obj = new GameEnum.AniLabel();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameEnum.AniLabel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Idle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_aim_Idle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.aim_Idle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle_Wait_A(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Idle_Wait_A);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle_Wait_B(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Idle_Wait_B);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_run_fwd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.run_fwd);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_walk_fwd(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.walk_fwd);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mvm_Jog(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Mvm_Jog);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mvm_Dash(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Mvm_Dash);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mvm_DashEnd_C(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Mvm_DashEnd_C);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mvm_DashEnd_B(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Mvm_DashEnd_B);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mvm_Stop_Front(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Mvm_Stop_Front);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Jmp_Base_A_Rise(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Jmp_Base_A_Rise);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Jmp_Base_A_OnGround(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Jmp_Base_A_OnGround);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Jmp_Base_A_Fall(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Jmp_Base_A_Fall);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PickUp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.PickUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Down_Jmp_Base_A_Rise(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Down_Jmp_Base_A_Rise);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Down_Jmp_Base_A_OnGround(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Down_Jmp_Base_A_OnGround);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Down_Jmp_Base_A_Fall(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.Down_Jmp_Base_A_Fall);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DownIdle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.DownIdle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpIdle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.UpIdle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangeWeapon(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.ChangeWeapon);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pistol_aim(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.pistol_aim);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pistol_reload(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.pistol_reload);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pistol_shot(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.pistol_shot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pistol_guard(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.pistol_guard);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rifle_aim(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.rifle_aim);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rifle_reload(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.rifle_reload);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rifle_shot(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.rifle_shot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rifle_idle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameEnum.AniLabel.rifle_idle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

