//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_AimStateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(GameEnum.AimState));
		L.RegVar("Null", get_Null, null);
		L.RegVar("Begin", get_Begin, null);
		L.RegVar("Aiming", get_Aiming, null);
		L.RegVar("AimingFinish", get_AimingFinish, null);
		L.RegVar("AimOff", get_AimOff, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<GameEnum.AimState>.Check = CheckType;
		StackTraits<GameEnum.AimState>.Push = Push;
	}

	static void Push(IntPtr L, GameEnum.AimState arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(GameEnum.AimState), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		ToLua.Push(L, GameEnum.AimState.Null);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Begin(IntPtr L)
	{
		ToLua.Push(L, GameEnum.AimState.Begin);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Aiming(IntPtr L)
	{
		ToLua.Push(L, GameEnum.AimState.Aiming);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AimingFinish(IntPtr L)
	{
		ToLua.Push(L, GameEnum.AimState.AimingFinish);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AimOff(IntPtr L)
	{
		ToLua.Push(L, GameEnum.AimState.AimOff);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		GameEnum.AimState o = (GameEnum.AimState)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

