//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_GunStateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(GameEnum.GunState));
		L.RegVar("Idle", get_Idle, null);
		L.RegVar("Firing", get_Firing, null);
		L.RegVar("Reloading", get_Reloading, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<GameEnum.GunState>.Check = CheckType;
		StackTraits<GameEnum.GunState>.Push = Push;
	}

	static void Push(IntPtr L, GameEnum.GunState arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(GameEnum.GunState), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle(IntPtr L)
	{
		ToLua.Push(L, GameEnum.GunState.Idle);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Firing(IntPtr L)
	{
		ToLua.Push(L, GameEnum.GunState.Firing);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reloading(IntPtr L)
	{
		ToLua.Push(L, GameEnum.GunState.Reloading);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		GameEnum.GunState o = (GameEnum.GunState)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

