//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GEventDispatcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GEventDispatcher), typeof(System.Object));
		L.RegFunction("addEventListener", addEventListener);
		L.RegFunction("removeEventListener", removeEventListener);
		L.RegFunction("removeEventListenerByType", removeEventListenerByType);
		L.RegFunction("hasEventListener", hasEventListener);
		L.RegFunction("send", send);
		L.RegFunction("dispatchEvent", dispatchEvent);
		L.RegFunction("ClearAllEvent", ClearAllEvent);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateGEventDispatcher);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGEventDispatcher(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GEventDispatcher obj = new GEventDispatcher();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GEventDispatcher.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<object[]> arg1 = (System.Action<object[]>)ToLua.CheckDelegate<System.Action<object[]>>(L, 3);
			obj.addEventListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<object[]> arg1 = (System.Action<object[]>)ToLua.CheckDelegate<System.Action<object[]>>(L, 3);
			obj.removeEventListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeEventListenerByType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.removeEventListenerByType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int hasEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.hasEventListener(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.send(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.send(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GEventDispatcher.send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int dispatchEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.dispatchEvent(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object[] arg1 = ToLua.CheckObjectArray(L, 3);
				obj.dispatchEvent(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GEventDispatcher.dispatchEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			obj.ClearAllEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject<GEventDispatcher>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

