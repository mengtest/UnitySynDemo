//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MovePartWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MovePart), typeof(System.Object));
		L.RegFunction("PauseMove", PauseMove);
		L.RegFunction("PesumeMove", PesumeMove);
		L.RegFunction("Init", Init);
		L.RegFunction("fixUpdate", fixUpdate);
		L.RegFunction("InitSpeed", InitSpeed);
		L.RegFunction("StartMove", StartMove);
		L.RegFunction("StartMoveToByList", StartMoveToByList);
		L.RegFunction("StartMoveTo", StartMoveTo);
		L.RegFunction("StopMove", StopMove);
		L.RegFunction("IsMove", IsMove);
		L.RegFunction("IsFollowTarget", IsFollowTarget);
		L.RegFunction("GetNextMoveSpeedDic", GetNextMoveSpeedDic);
		L.RegFunction("SetTargetRotation", SetTargetRotation);
		L.RegFunction("SetTargetDir", SetTargetDir);
		L.RegFunction("followMyTarget", followMyTarget);
		L.RegFunction("chkFollowTarget", chkFollowTarget);
		L.RegFunction("startFollowTarget", startFollowTarget);
		L.RegFunction("SetFollowTarget", SetFollowTarget);
		L.RegFunction("cancelFollowTarget", cancelFollowTarget);
		L.RegFunction("changeDir", changeDir);
		L.RegFunction("startMoveToByListWithReverseList", startMoveToByListWithReverseList);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("reset", reset);
		L.RegFunction("New", _CreateMovePart);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("forwardDirection", get_forwardDirection, set_forwardDirection);
		L.RegVar("faceToRotation", get_faceToRotation, set_faceToRotation);
		L.RegVar("rotateSpeed", get_rotateSpeed, set_rotateSpeed);
		L.RegVar("movePoint", get_movePoint, set_movePoint);
		L.RegVar("targetPos", get_targetPos, set_targetPos);
		L.RegVar("speed", get_speed, set_speed);
		L.RegVar("hasTarget", get_hasTarget, set_hasTarget);
		L.RegVar("AcceleratedSpeed", get_AcceleratedSpeed, set_AcceleratedSpeed);
		L.RegVar("MaxSpeed", get_MaxSpeed, set_MaxSpeed);
		L.RegVar("ZeroSpeedStop", get_ZeroSpeedStop, set_ZeroSpeedStop);
		L.RegVar("useMovePoint", get_useMovePoint, set_useMovePoint);
		L.RegVar("useWeightPower", get_useWeightPower, set_useWeightPower);
		L.RegVar("ImmDir", get_ImmDir, set_ImmDir);
		L.RegVar("target", get_target, set_target);
		L.RegVar("targetOffset", get_targetOffset, set_targetOffset);
		L.RegVar("extraAcSpeed", get_extraAcSpeed, set_extraAcSpeed);
		L.RegVar("extraCurSpeed", get_extraCurSpeed, set_extraCurSpeed);
		L.RegVar("extraSpeed", get_extraSpeed, set_extraSpeed);
		L.RegVar("extraDir", get_extraDir, set_extraDir);
		L.RegVar("extraMaxSpeed", get_extraMaxSpeed, set_extraMaxSpeed);
		L.RegVar("extraMoveStartTime", get_extraMoveStartTime, set_extraMoveStartTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMovePart(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 1);
				MovePart obj = new MovePart(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MovePart.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.PauseMove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PesumeMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.PesumeMove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int fixUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.fixUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.InitSpeed();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.StartMove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMoveToByList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.StartMoveToByList(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.StartMoveTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopMove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
				obj.StopMove();
				return 0;
			}
			else if (count == 2)
			{
				MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.StopMove(arg0);
				return 0;
			}
			else if (count == 3)
			{
				MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.StopMove(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MovePart.StopMove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			bool o = obj.IsMove();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			bool o = obj.IsFollowTarget();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextMoveSpeedDic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			UnityEngine.Vector3 o = obj.GetNextMoveSpeedDic();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTargetRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetTargetRotation(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTargetDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetTargetDir(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int followMyTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.followMyTarget();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int chkFollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			bool o = obj.chkFollowTarget();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int startFollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
			obj.startFollowTarget(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
			obj.SetFollowTarget(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int cancelFollowTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.cancelFollowTarget();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int changeDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.changeDir(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int startMoveToByListWithReverseList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.startMoveToByListWithReverseList(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
				obj.reset();
				return 0;
			}
			else if (count == 2)
			{
				MovePart obj = (MovePart)ToLua.CheckObject<MovePart>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.reset(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MovePart.reset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_forwardDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 ret = obj.forwardDirection;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forwardDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_faceToRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.faceToRotation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index faceToRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotateSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.rotateSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotateSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movePoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.movePoint;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movePoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 ret = obj.targetPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.hasTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AcceleratedSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.AcceleratedSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AcceleratedSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.MaxSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ZeroSpeedStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.ZeroSpeedStop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZeroSpeedStop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useMovePoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.useMovePoint;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMovePoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useWeightPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.useWeightPower;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useWeightPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool ret = obj.ImmDir;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ImmDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			ObjBase ret = obj.target;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index target on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 ret = obj.targetOffset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraAcSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraAcSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraAcSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraCurSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraCurSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraCurSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraDir;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraMaxSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraMaxSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraMaxSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extraMoveStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float ret = obj.extraMoveStartTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraMoveStartTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_forwardDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.forwardDirection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forwardDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_faceToRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.faceToRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index faceToRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotateSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.rotateSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotateSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_movePoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.movePoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movePoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.targetPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AcceleratedSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AcceleratedSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AcceleratedSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ZeroSpeedStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ZeroSpeedStop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZeroSpeedStop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useMovePoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useMovePoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMovePoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useWeightPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useWeightPower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useWeightPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ImmDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ImmDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ImmDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
			obj.target = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index target on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.targetOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraAcSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraAcSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraAcSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraCurSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraCurSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraCurSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraMaxSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraMaxSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraMaxSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extraMoveStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovePart obj = (MovePart)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.extraMoveStartTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index extraMoveStartTime on a nil value");
		}
	}
}

