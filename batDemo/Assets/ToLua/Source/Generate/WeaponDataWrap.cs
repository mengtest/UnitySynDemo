//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WeaponDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WeaponData), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("init", init);
		L.RegFunction("initGunData", initGunData);
		L.RegFunction("getGunData", getGunData);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("PlaySpeed", get_PlaySpeed, set_PlaySpeed);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
				ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
				obj.init(arg0);
				return 0;
			}
			else if (count == 3)
			{
				WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
				ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.init(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
				ObjBase arg0 = (ObjBase)ToLua.CheckObject<ObjBase>(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				obj.init(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WeaponData.init");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int initGunData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
			obj.initGunData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getGunData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
			Weapon_Gun o = obj.getGunData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WeaponData obj = (WeaponData)ToLua.CheckObject<WeaponData>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlaySpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WeaponData obj = (WeaponData)o;
			float ret = obj.PlaySpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PlaySpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlaySpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WeaponData obj = (WeaponData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.PlaySpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PlaySpeed on a nil value");
		}
	}
}

