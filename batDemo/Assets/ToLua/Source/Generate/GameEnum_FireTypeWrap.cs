//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_FireTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(GameEnum.FireType));
		L.RegVar("SEMI", get_SEMI, null);
		L.RegVar("BURST", get_BURST, null);
		L.RegVar("AUTO", get_AUTO, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<GameEnum.FireType>.Check = CheckType;
		StackTraits<GameEnum.FireType>.Push = Push;
	}

	static void Push(IntPtr L, GameEnum.FireType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(GameEnum.FireType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SEMI(IntPtr L)
	{
		ToLua.Push(L, GameEnum.FireType.SEMI);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BURST(IntPtr L)
	{
		ToLua.Push(L, GameEnum.FireType.BURST);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AUTO(IntPtr L)
	{
		ToLua.Push(L, GameEnum.FireType.AUTO);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		GameEnum.FireType o = (GameEnum.FireType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

