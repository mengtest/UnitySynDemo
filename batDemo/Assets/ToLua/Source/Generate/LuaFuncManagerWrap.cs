//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFuncManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFuncManager), typeof(System.Object));
		L.RegFunction("addCustomListener", addCustomListener);
		L.RegFunction("dispatchCustomEvent", dispatchCustomEvent);
		L.RegFunction("Update", Update);
		L.RegFunction("New", _CreateLuaFuncManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFuncManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFuncManager obj = new LuaFuncManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaFuncManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addCustomListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFuncManager obj = (LuaFuncManager)ToLua.CheckObject<LuaFuncManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.addCustomListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int dispatchCustomEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				LuaFuncManager.dispatchCustomEvent(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				LuaFuncManager.dispatchCustomEvent(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<LuaInterface.LuaByteBuffer>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				LuaByteBuffer arg1 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
				LuaFuncManager.dispatchCustomEvent(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaFuncManager.dispatchCustomEvent(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFuncManager.dispatchCustomEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFuncManager obj = (LuaFuncManager)ToLua.CheckObject<LuaFuncManager>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaFuncManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

