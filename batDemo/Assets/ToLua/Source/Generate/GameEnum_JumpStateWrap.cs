//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameEnum_JumpStateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(GameEnum.JumpState));
		L.RegVar("JumpOnGround", get_JumpOnGround, null);
		L.RegVar("JumpRise", get_JumpRise, null);
		L.RegVar("JumpFall", get_JumpFall, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<GameEnum.JumpState>.Check = CheckType;
		StackTraits<GameEnum.JumpState>.Push = Push;
	}

	static void Push(IntPtr L, GameEnum.JumpState arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(GameEnum.JumpState), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JumpOnGround(IntPtr L)
	{
		ToLua.Push(L, GameEnum.JumpState.JumpOnGround);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JumpRise(IntPtr L)
	{
		ToLua.Push(L, GameEnum.JumpState.JumpRise);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JumpFall(IntPtr L)
	{
		ToLua.Push(L, GameEnum.JumpState.JumpFall);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		GameEnum.JumpState o = (GameEnum.JumpState)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

