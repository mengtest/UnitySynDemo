//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BulletWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Bullet), typeof(ObjBase));
		L.RegFunction("init", init);
		L.RegFunction("setOwner", setOwner);
		L.RegFunction("setMaxDic", setMaxDic);
		L.RegFunction("moveToFirePoint", moveToFirePoint);
		L.RegFunction("OnMove", OnMove);
		L.RegFunction("onGet", onGet);
		L.RegFunction("onRecycle", onRecycle);
		L.RegFunction("onRelease", onRelease);
		L.RegFunction("New", _CreateBullet);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBullet(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Bullet obj = new Bullet();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Bullet.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			obj.init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOwner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			Gun arg0 = (Gun)ToLua.CheckObject<Gun>(L, 2);
			obj.setOwner(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMaxDic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.setMaxDic(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int moveToFirePoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			obj.moveToFirePoint();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.OnMove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onGet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			obj.onGet();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			obj.onRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onRelease(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bullet obj = (Bullet)ToLua.CheckObject<Bullet>(L, 1);
			obj.onRelease();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

