// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmdpkg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TcpSocket.Proto {

  /// <summary>Holder for reflection information generated from cmdpkg.proto</summary>
  public static partial class CmdpkgReflection {

    #region Descriptor
    /// <summary>File descriptor for cmdpkg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CmdpkgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjbWRwa2cucHJvdG8SBmNtZHBrZyLRAQoHUGtnSGVhZBILCgNDbWQYASAB",
            "KA0SJQoJVHJhbnNUeXBlGAIgASgOMhIuY21kcGtnLlRSQU5TX1RZUEUSDgoG",
            "U2VyaWFsGAMgASgNEhIKClN0YXR1c0NvZGUYBCABKA0SDwoHVGltZW91dBgF",
            "IAEoDRItCgdPcHRpb25zGAYgAygLMhwuY21kcGtnLlBrZ0hlYWQuT3B0aW9u",
            "c0VudHJ5Gi4KDE9wdGlvbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIjgKCUNtZFBhY2tldBIdCgRIZWFkGAEgASgLMg8uY21kcGtn",
            "LlBrZ0hlYWQSDAoEQm9keRgCIAEoDConCgpUUkFOU19UWVBFEgsKB1JFUVVF",
            "U1QQABIMCghSRVNQT05TRRABQhKqAg9UY3BTb2NrZXQuUHJvdG9iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TcpSocket.Proto.TRANS_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpSocket.Proto.PkgHead), global::TcpSocket.Proto.PkgHead.Parser, new[]{ "Cmd", "TransType", "Serial", "StatusCode", "Timeout", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpSocket.Proto.CmdPacket), global::TcpSocket.Proto.CmdPacket.Parser, new[]{ "Head", "Body" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TRANS_TYPE {
    /// <summary>
    /// request tag
    /// </summary>
    [pbr::OriginalName("REQUEST")] Request = 0,
    /// <summary>
    /// response tag
    /// </summary>
    [pbr::OriginalName("RESPONSE")] Response = 1,
  }

  #endregion

  #region Messages
  public sealed partial class PkgHead : pb::IMessage<PkgHead> {
    private static readonly pb::MessageParser<PkgHead> _parser = new pb::MessageParser<PkgHead>(() => new PkgHead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PkgHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TcpSocket.Proto.CmdpkgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PkgHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PkgHead(PkgHead other) : this() {
      cmd_ = other.cmd_;
      transType_ = other.transType_;
      serial_ = other.serial_;
      statusCode_ = other.statusCode_;
      timeout_ = other.timeout_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PkgHead Clone() {
      return new PkgHead(this);
    }

    /// <summary>Field number for the "Cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private uint cmd_;
    /// <summary>
    ///CMD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "TransType" field.</summary>
    public const int TransTypeFieldNumber = 2;
    private global::TcpSocket.Proto.TRANS_TYPE transType_ = 0;
    /// <summary>
    /// 0表示request, 1表示response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TcpSocket.Proto.TRANS_TYPE TransType {
      get { return transType_; }
      set {
        transType_ = value;
      }
    }

    /// <summary>Field number for the "Serial" field.</summary>
    public const int SerialFieldNumber = 3;
    private uint serial_;
    /// <summary>
    /// 序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Serial {
      get { return serial_; }
      set {
        serial_ = value;
      }
    }

    /// <summary>Field number for the "StatusCode" field.</summary>
    public const int StatusCodeFieldNumber = 4;
    private uint statusCode_;
    /// <summary>
    /// 状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "Timeout" field.</summary>
    public const int TimeoutFieldNumber = 5;
    private uint timeout_;
    /// <summary>
    ///超时包设置为1 用于前端重试
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "Options" field.</summary>
    public const int OptionsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// 自定义Options 是 Map对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PkgHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PkgHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (TransType != other.TransType) return false;
      if (Serial != other.Serial) return false;
      if (StatusCode != other.StatusCode) return false;
      if (Timeout != other.Timeout) return false;
      if (!Options.Equals(other.Options)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (TransType != 0) hash ^= TransType.GetHashCode();
      if (Serial != 0) hash ^= Serial.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cmd);
      }
      if (TransType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TransType);
      }
      if (Serial != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Serial);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StatusCode);
      }
      if (Timeout != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Timeout);
      }
      options_.WriteTo(output, _map_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmd);
      }
      if (TransType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransType);
      }
      if (Serial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Serial);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
      }
      size += options_.CalculateSize(_map_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PkgHead other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.TransType != 0) {
        TransType = other.TransType;
      }
      if (other.Serial != 0) {
        Serial = other.Serial;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cmd = input.ReadUInt32();
            break;
          }
          case 16: {
            transType_ = (global::TcpSocket.Proto.TRANS_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            Serial = input.ReadUInt32();
            break;
          }
          case 32: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 40: {
            Timeout = input.ReadUInt32();
            break;
          }
          case 50: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CmdPacket : pb::IMessage<CmdPacket> {
    private static readonly pb::MessageParser<CmdPacket> _parser = new pb::MessageParser<CmdPacket>(() => new CmdPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TcpSocket.Proto.CmdpkgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdPacket(CmdPacket other) : this() {
      Head = other.head_ != null ? other.Head.Clone() : null;
      body_ = other.body_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdPacket Clone() {
      return new CmdPacket(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::TcpSocket.Proto.PkgHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TcpSocket.Proto.PkgHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CmdPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CmdPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (Body != other.Body) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CmdPacket other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          head_ = new global::TcpSocket.Proto.PkgHead();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (head_ == null) {
              head_ = new global::TcpSocket.Proto.PkgHead();
            }
            input.ReadMessage(head_);
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
